---
import { Icon } from "astro-icon";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { NavItem } from "~/types";
// import HeaderSocials from '~/components/headerSocials.astro'
import SocialCornerUp from "~/components/SocialCornerUp";

// // <Icon name="justincurieux_logo" class="h-10 st6" />
import LogoSVG from '~/components/LogoSVG'
// import { useNavigate } from "react-router-dom";
// const navigate = useNavigate();
const navOnAirItems: Array<NavItem> = [
  { title: "ON AIR", url: "#" },
];
const navItems: Array<NavItem> = [
  { title: "Bientôt", url: "#features" },
  { title: "Réseaux Sociaux", url: "#compatibility" },
  { title: "Vidéos", url: "#showcase" },
];
/**
 * <!-- animate-typing example : https://play.tailwindcss.com/q6LZjWKr97  -->
 */
---

<header
  id="page-header"
  class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-transparent px-3 py-2 xl:px-8 xl:py-4 sm:px-3 sm:py-2 text-white"
>
  <a class="flex items-center gap-3 hover:!text-default" href="#">
    <h1 class="sr-only">Justin Curieux</h1>
    <style type="text/css">
      .st0{display:none;}
      .st1{display:inline;fill:none;stroke:#FF0000;stroke-width:15;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;}
      .st2{display:inline;fill:#FF0000;}
      .st3{display:inline;fill:none;stroke:#FF0000;stroke-width:13;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;}
      .st4{display:inline;}
      .st5{display:inline;fill:none;stroke:#FF0000;stroke-width:14.22;stroke-miterlimit:10;}
      .st6{fill:#FF5D01;}
      .logo_livre{display:inline;fill:none;stroke:#FF0000;stroke-width:14.22;stroke-miterlimit:10;}
      path.logo_livre{stroke: black; fill: black;}
      polygon.logo_livre{stroke: black; fill: black;}
    </style>
    <LogoSVG />
    <Icon name="wordmark" class="p-1 hidden h-4 sm:block" />
  </a>

<!--
<button type="button" class="text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Purple to Blue</button>
<button type="button" class="text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Cyan to Blue</button>
<button type="button" class="text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Green to Blue</button>
<button type="button" class="text-white bg-gradient-to-r from-purple-500 to-pink-500 hover:bg-gradient-to-l focus:ring-4 focus:outline-none focus:ring-purple-200 dark:focus:ring-purple-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Purple to Pink</button>
<button type="button" class="text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Pink to Orange</button>
<button type="button" class="text-gray-900 bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 focus:outline-none focus:ring-lime-200 dark:focus:ring-teal-700 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Teal to Lime</button>
<button type="button" class="text-gray-900 bg-gradient-to-r from-red-200 via-red-300 to-yellow-200 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-red-100 dark:focus:ring-red-400 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2">Red to Yellow</button>
-->
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navOnAirItems.map(({ title, url }) => (
              <li>
                <a href={url} class="inline-flex overflow-hidden text-white bg-gray-900 rounded group">
                  <span class="px-3.5 py-2 text-white bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 flex items-center justify-center">
                    <span class="animate-infinite animate-jump animate-duration-[2000ms] relative flex h-3 w-3">
                      <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75"></span>
                      <span class="animate-infinite animate-jump animate-duration-[2000ms] relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
                    </span> 
                  </span>
                  
                  
                  <span class="pl-4 pr-5 py-2.5 bg-gradient-to-r from-purple-500 to-pink-500 hover:bg-gradient-to-l ">
                    
                    <div class="animate-typing overflow-hidden whitespace-nowrap border-r-4 border-r-white pr-5 text-small text-white font-bold" >
                      <span class="text-small text-transparent">- . </span>
                      {title}
                    </div>
                    
                  </span>
                </a>
              </li>
            ))
          }
          {
            navItems.map(({ title, url }) => (
              <li>
                <a class="text-sm" href={url}>
                  {title}
                </a>
              </li>
            ))
          }

        {/**
          * ------------------ ------------------ ------------------
          *   <li>
          *     <a class="text-sm" href={`#`}>
          *       <SocialCornerUp urlOfLinkToShare={`https://www.twitch.tv/Justin_Curieux`} client:only="preact" />
          *     </a>
          *   </li> 
          * 
          * ------------------ ------------------ ------------------
          ***/
         }
          
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" />
      </button>
      <SocialCornerUp name="hamburger" urlOfLinkToShare={`https://www.twitch.tv/Justin_Curieux`} client:only="preact" />
      <ThemeSwitcher />
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" />
            </button>
          </header>
          <div class="flex justify-center">
            <Icon name="logomark" class="h-16" />
          </div>
          <nav>
            <ul class="flex flex-col">
              {
                navOnAirItems.map(({ title, url }) => (
                  <li>
                    <a href={url} class="inline-flex overflow-hidden text-white bg-gray-900 rounded group">
                      <span class="px-3.5 py-2 text-white bg-gradient-to-r from-teal-200 to-lime-200 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 flex items-center justify-center">
                        <span class="animate-infinite animate-jump animate-duration-[2000ms] relative flex h-3 w-3">
                          <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75"></span>
                          <span class="animate-infinite animate-jump animate-duration-[2000ms] relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
                        </span> 
                      </span>
                      
                      
                      <span class="pl-4 pr-5 py-2.5 bg-gradient-to-r from-purple-500 to-pink-500 hover:bg-gradient-to-l ">
                        
                        <div class="animate-typing overflow-hidden whitespace-nowrap border-r-4 border-r-white pr-5 text-small text-white font-bold" >
                          <span class="text-small text-transparent">- . </span>
                          {title}
                        </div>
                        
                      </span>
                    </a>
                  </li>
                ))
              }
              {
                navItems.map(({ title, url }) => (
                  <li>
                    <a class="block py-4 text-center text-xl" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }

              <li>
                <a class="text-sm" href={`#`}>
                  <SocialCornerUp name="noburger" urlOfLinkToShare={`https://www.twitch.tv/Justin_Curieux`} client:only="preact" />
                </a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
</style>
